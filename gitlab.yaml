heat_template_version: 2015-10-15

description: |
  Single Linux server running [GitLab 7.8.1](http://gitlab.org/) with a
  [PostgreSQL](http://www.postgresql.org/) back end.

parameter_groups:
- label: GitLab Settings
  parameters:
  - gitlab_url
  - gitlab_email
- label: rax-dev-params
  parameters:
  - server_image
  - ansible_source
parameters:
  #GitLab Customization
  gitlab_url:
    type: string
    default: example.com
    label: GitLab URL
    description: Domain to use with GitLab
    constraints:
    - allowed_pattern: "^[a-zA-Z0-9.-]{1,255}.[a-zA-Z]{2,15}$"
      description: Must be a valid domain name
  gitlab_email:
    type: string
    default: admin@example.com
    label: GitLab Admin E-mail
    description: E-mail Address for GitLab Admin User
  #Advanced Options
  server_flavor:
    type: string
    default: 4 GB General Purpose v1
    label: Server Flavor
    description: Flavor of Cloud Server to use
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
  server_image:
   type: string
   default: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM) (Orchestration)
   constraints:
   - allowed_values:
     - Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM) (Orchestration)
  ansible_source:
    type: string
    default: http://catalog.rs-heat.com/ansible-roles/ansible-roles.tar.gz
    label: Ansible Tarball
    description: The Ansible Roles will be pulled from the location provided
    immutable: true

resources:
  #SSH Key
  ssh_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true
  gitlab_admin_password:
    type: OS::Heat::RandomString
  #Software Configurations
  upload_role_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -e
            mkdir -p /etc/ansible/roles
            wget ansible_source -O /tmp/ansible-roles.tar.gz 2>&1
            tar -xf /tmp/ansible-roles.tar.gz --strip-components=1 -C /etc/ansible/roles
          params:
            ansible_source: { get_param: ansible_source }
  gitlab_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      config: |
        ---
        - name: Install and configure GitLab
          hosts: localhost
          connection: local
          roles:
          - common
          - gitlab
          - firewall
  deploy_roles:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config:
        get_resource: upload_role_config
      server:
        get_resource: gitlab_server
  deploy_gitlab:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_roles
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        tz: "America/Chicago"
        gitlab_url: { get_param: gitlab_url }
        gitlab_admin_password: { get_attr: [ gitlab_admin_password, value ] }
        firewall_global_rules: [ "0.0.0.0,0,22,tcp", "0.0.0.0,0,80,tcp", "0.0.0.0,0,443,tcp"]
        firewall_nodes: []
        firewall_node_rules: []
      config:
        get_resource: gitlab_config
      server:
        get_resource: gitlab_server
  gitlab_server:
    type: "OS::Nova::Server"
    properties:
      name: { get_param: "OS::stack_name" }
      flavor: { get_param: server_flavor }
      image: { get_param: server_image }
      key_name: { get_resource: ssh_key }
      software_config_transport: POLL_TEMP_URL
      config_drive: true
      user_data_format: SOFTWARE_CONFIG
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        build_config: "backup_agent_only,monitoring_defaults"
  #Monitoring Checks
  gitlab_server_http_check:
    type: Rackspace::CloudMonitoring::Check
    depends_on: deploy_gitlab
    properties:
      entity: { get_resource: gitlab_server }
      type: remote.http
      label:
        str_replace:
          template: stack HTTP Check
          params:
            stack: { get_param: "OS::stack_name" }
      details:
        url:
          str_replace:
            template: "http://ipaddr"
            params:
              ipaddr: { get_attr: [gitlab_server, accessIPv4] }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 120
      timeout: 10
      monitoring_zones_poll:
      - Northern Virginia (IAD)
      - Chicago (ORD)
      - Dallas Fort Worth (DFW)
      - London (LON)
      target_hostname: { get_attr: [gitlab_server, accessIPv4] }
      target_receiver: IPv4
  #Cloud Backup
  gitlab_backup:
    type: Rackspace::Cloud::BackupConfig
    depends_on: gitlab_server
    properties:
      host_ip_address: { get_attr: [gitlab_server, accessIPv4] }
      BackupConfigurationName:
        str_replace:
          template: stack Daily Backup
          params:
            stack: { get_param: "OS::stack_name" }
      Inclusions:
      - FilePath: "/var/opt/gitlab/backups/"
        FileItemType: "Folder"
      NotifyFailure: true
      NotifyRecipients: { get_param: gitlab_email }
      TimeZoneId: Central Standard Time
      StartTimeAmPm: AM
      StartTimeHour: 1
      StartTimeMinute: 0
      HourInterval: null
      DayOfWeekId: null
      Frequency: "Daily"
      VersionRetention: 30
outputs:
  ssh_private_key:
    description: SSH Private Key
    value:
      get_attr: [ssh_key, private_key]
  gitlab_login_user:
    description: GitLab Admin User
    value: 'root'
  gitlab_login_password:
    description: GitLab Admin Password
    value: { get_attr: [ gitlab_admin_password, value ] }
  gitlab_url:
    description: GitLab URL
    value:
      str_replace:
        template: "https://url/"
        params:
          url: { get_param: gitlab_url }
  server_ip:
    description: Server IP
    value: { get_attr: [ gitlab_server, accessIPv4 ] }
